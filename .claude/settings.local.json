{
  "permissions": {
    "allow": [
      "mcp__ruv-swarm",
      "mcp__claude-flow",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(node scripts/update-frontend-abi.js)",
      "Bash(git pull:*)",
      "Bash(git commit:*)",
      "Bash(npm install)",
      "Bash(npm test)",
      "Bash(node:*)",
      "Bash(grep:*)",
      "Bash(npm run demo:*)",
      "Bash(env)",
      "Bash(supabase status:*)",
      "Bash(supabase start:*)",
      "Bash(supabase stop:*)",
      "Bash(supabase login:*)",
      "Bash(supabase logout:*)",
      "Bash(supabase db:*)",
      "Bash(supabase db push:*)",
      "Bash(supabase db pull:*)",
      "Bash(supabase db reset:*)",
      "Bash(supabase db dump:*)",
      "Bash(supabase db diff:*)",
      "Bash(supabase db lint:*)",
      "Bash(supabase db start:*)",
      "Bash(supabase migration:*)",
      "Bash(supabase migration new:*)",
      "Bash(supabase migration up:*)",
      "Bash(supabase migration down:*)",
      "Bash(supabase migration list:*)",
      "Bash(supabase migration squash:*)",
      "Bash(supabase migration repair:*)",
      "Bash(supabase migration fetch:*)",
      "Bash(supabase gen:*)",
      "Bash(supabase functions:*)",
      "Bash(supabase secrets:*)",
      "Bash(supabase storage:*)",
      "Bash(supabase branches:*)",
      "Bash(supabase test:*)",
      "Bash(supabase services:*)",
      "Bash(supabase inspect:*)",
      "Bash(supabase seed:*)",
      "Bash(supabase config:*)",
      "Bash(supabase domains:*)",
      "Bash(supabase backups:*)",
      "Bash(npm link:*)",
      "Bash(claude project create:*)",
      "Bash(supabase link:*)",
      "Bash(node:*)",
      "Bash(grep:*)",
      "Bash(env)",
      "Bash(chmod:*)",
      "Bash(./install-global.sh)",
      "Bash(sudo:*)",
      "Bash(chmod:*)",
      "Bash(./apply-migration-now.sh:*)",
      "Bash(~/bin/cps:*)",
      "Bash(npm run dev:*)",
      "Bash(supabase db push:*)",
      "Bash(supabase init:*)",
      "Bash(mv:*)",
      "Bash(printenv)",
      "Bash(node:*)",
      "Bash(PGPASSWORD=\"\" psql \"postgresql://postgres.kmepcdsklnnxokoimvzo@aws-1-us-west-1.pooler.supabase.com:6543/postgres\" -f supabase/migrations/20250821220307_create_form_submissions_table.sql)",
      "Bash(HARDHAT_CONFIG=/Users/Danallovertheplace/crypto-campaign-unified/contracts/hardhat.config.js node /Users/Danallovertheplace/crypto-campaign-unified/contracts/simple-test.js)",
      "Bash(HARDHAT_NETWORK=localhost node -e \"\nconst { ethers } = require(''hardhat'');\nasync function main() {\n  console.log(''Checking contract at 0x5FbDB2315678afecb367f032d93F642f64180aa3'');\n  try {\n    const code = await ethers.provider.getCode(''0x5FbDB2315678afecb367f032d93F642f64180aa3'');\n    console.log(''Contract code length:'', code.length);\n    console.log(''Contract exists:'', code !== ''0x'');\n    \n    const network = await ethers.provider.getNetwork();\n    console.log(''Network:'', network.name, ''Chain ID:'', network.chainId.toString());\n    \n    const blockNumber = await ethers.provider.getBlockNumber();\n    console.log(''Current block number:'', blockNumber);\n  } catch (error) {\n    console.error(''Error checking contract:'', error.message);\n  }\n}\nmain();\n\")",
      "Bash(HARDHAT_NETWORK=localhost node -e \"\nconst { ethers } = require(''hardhat'');\nasync function main() {\n  console.log(''Testing connection to localhost network...'');\n  try {\n    const provider = ethers.provider;\n    const network = await provider.getNetwork();\n    console.log(''Connected to network:'', network.name, ''Chain ID:'', network.chainId.toString());\n    \n    const blockNumber = await provider.getBlockNumber();\n    console.log(''Current block number:'', blockNumber);\n    \n    console.log(''Checking contract at 0x5FbDB2315678afecb367f032d93F642f64180aa3'');\n    const code = await provider.getCode(''0x5FbDB2315678afecb367f032d93F642f64180aa3'');\n    console.log(''Contract code length:'', code.length);\n    console.log(''Contract exists:'', code !== ''0x'');\n  } catch (error) {\n    console.error(''Connection error:'', error.message);\n  }\n}\nmain();\n\")",
      "Bash(HARDHAT_NETWORK=localhost node /Users/Danallovertheplace/crypto-campaign-unified/contracts/direct-test.js)",
      "Bash(curl:*)",
      "Bash(brew install:*)",
      "Bash(npm run dev:*)",
      "Bash(grep:*)",
      "Bash(PGPASSWORD=\"\" /opt/homebrew/opt/postgresql@14/bin/psql \"postgresql://postgres.kmepcdsklnnxokoimvzo@aws-1-us-west-1.pooler.supabase.com:6543/postgres\" -c \"SELECT version();\")",
      "Bash(for file in src/components/EnhancedDonorForm.jsx src/components/DonorForm.jsx src/lib/smart-contract.js)",
      "Bash(do sed -i '' '/<<<<<<< HEAD/,/=======/d' \"$file\")",
      "Bash(sed:*)",
      "Bash(done)",
      "Bash(grep:*)",
      "Bash(PGPASSWORD=\"\" /opt/homebrew/opt/postgresql@14/bin/psql \"postgresql://postgres.kmepcdsklnnxokoimvzo@aws-1-us-west-1.pooler.supabase.com:6543/postgres\" -f supabase/migrations/20250821220307_create_form_submissions_table.sql)",
      "Bash(timeout:*)",
      "Bash(git pull:*)",
      "Bash(git push:*)",
      "Bash(git stash:*)",
      "Bash(git commit:*)",
      "Bash(git fetch:*)",
      "Bash(git merge:*)",
      "Bash(git add:*)",
      "Bash(curl:*)",
      "Bash(brew install:*)",
      "Bash(ngrok config:*)",
      "Bash(npm install:*)",
      "Bash(npx playwright test:*)",
      "Bash(git rebase:*)",
      "Bash(git add:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git add:*)",
      "Bash(git pull:*)",
      "Bash(git stash:*)",
      "Bash(git commit:*)",
      "Bash(bash:*)",
      "Bash(source:*)",
      "Bash(name-devops)",
      "Bash(auto-name)",
      "Bash(name_devops)",
      "Bash(auto_name_terminal)",
      "Bash(printf '\\033]2;%s\\033\\\\' \"TERMINAL 1-DEVOPS-MONITOR\")",
      "Bash(printf '\\033]2;%s\\033\\\\' \"TERMINAL 2-TOOLS-SETUP\")",
      "Bash(name1:*)",
      "Bash(name2:*)",
      "Bash(PS1=\"\\[\\e]0;TERMINAL 1-TOOLS-DEVOPS\\a\\]$PS1\")",
      "Bash(echo $TERM_PROGRAM)",
      "Bash(echo $TERM)",
      "Bash(echo $SHELL)",
      "Bash(osascript:*)",
      "Bash(name_all_windows)",
      "Bash(list_windows)",
      "Bash(cat:*)",
      "Bash(lsof:*)",
      "Bash(npx claude-flow@alpha hooks list:*)",
      "Bash(kill:*)",
      "Bash(export CLAUDE_FLOW_HOOKS_ENABLED=false)",
      "Bash(echo:*)",
      "Bash(git rm:*)",
      "Bash(git reset:*)",
      "Bash(open ~/pachacuti/devops/agent-dashboard.html)",
      "Bash(open agent-dashboard.html)",
      "Bash(cd:*)",
      "Bash(npm init:*)",
      "Bash(npm:*)",
      "Bash(git --version)",
      "Bash(npx @hapins/figma-mcp:*)",
      "Bash(npx supabase-mcp:*)",
      "Bash(./execute-autonomous-plan.sh)",
      "Bash(cd:*)",
      "Bash(./start-task-manager.sh create:*)",
      "Bash(./execute-live-site-plan.sh:*)",
      "Bash(ln:*)",
      "Bash(open /Users/Danallovertheplace/pachacuti/devops/agent-dashboard.html)",
      "Bash(~/bin/qc:*)",
      "Bash(qc:*)",
      "Bash(osascript:*)",
      "Bash(node scripts/*:*)",
      "Bash(./scripts/*:*)",
      "Bash(jq:*)",
      "Bash(tail:*)",
      "Bash(head:*)",
      "Bash(wc:*)",
      "Bash(date:*)",
      "Bash(basename:*)",
      "Bash(dirname:*)",
      "Bash(test:*)",
      "Bash(true)",
      "Bash(false)",
      "Bash(exit:*)",
      "Bash(return:*)",
      "Bash(pushd:*)",
      "Bash(popd:*)",
      "Bash",
      "mcp__github-mcp__search_repositories",
      "mcp__github-mcp__get_file_contents",
      "mcp__github-mcp__create_or_update_file",
      "WebFetch(domain:afyabnzugcolvsiseumb.supabase.co)",
      "WebFetch(domain:github.com)",
      "WebSearch",
      "WebFetch(domain:developer.twitter.com)",
      "WebFetch(domain:developer.x.com)",
      "WebFetch(domain:)",
      "mcp__github-mcp__search_code",
      "mcp__github-mcp__create_repository",
      "WebFetch(domain:www.regions.com)",
      "Read(//tmp/**)",
      "WebFetch(domain:api.slack.com)",
      "WebFetch(domain:www.wired.com)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "claude-flow",
    "ruv-swarm"
  ]
}